$sloped-edge-layout: null !default;
$sloped-edge-height: null !default;

@use '../../src/index' as sloped with (
  $layout: $sloped-edge-layout,
  $height: $sloped-edge-height
);
@use 'variables' as *;

body {
  counter-reset: section;
  font-family: 'Helvetica', sans-serif;

  @if $sloped-edge-layout == 'x' {
    display: flex;
    height: 100vh;
    overflow-y: hidden;
  }
}

.section {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 50vh;

  @if $sloped-edge-layout == 'x' {
    min-width: 50vw;
  }

  &::before {
    counter-increment: section;
    content: counter(section);
    font: {
      family: "Monoton";
      size: 10rem;
    }
  }

  &:nth-child(even) {
    background-color: map-get($section-colors, 'even');
    color: rgba(0, 0, 0, .5);
  }

  &:nth-child(odd) {
    background-color: map-get($section-colors, 'odd');
    color: rgba(255, 255, 255, .5);
  }

  &.is-sloped {
    @include sloped.edge-root;
  }

  @each $config in $sloped-edge-config {
    $index: index($sloped-edge-config, $config);
    $color: map-get($section-colors, if($index % 2 == 0, 'even', 'odd'));

    &:nth-child(#{$index + 1}) {
      padding-#{if($sloped-edge-layout == 'x', 'left', 'top')}: nth($config, 2);
    }

    &:nth-child(#{$index}) {
      @include sloped.edge($color, nth($config, 1), nth($config, 2));
    }
  }
}
